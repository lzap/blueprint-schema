{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/osbuild/blueprint-schema/blueprint",
  "$defs": {
    "Accounts": {
      "properties": {
        "users": {
          "oneOf": [
            {
              "items": {
                "$ref": "#/$defs/UserAccount"
              },
              "type": "array",
              "description": "Operating system user accounts to be created on the image."
            },
            {
              "type": "null"
            }
          ]
        },
        "groups": {
          "oneOf": [
            {
              "items": {
                "$ref": "#/$defs/GroupAccount"
              },
              "type": "array",
              "description": "Operating system group accounts to be created on the image."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "accounts:\n\n\tusers:\n\t  - name: \"lzap\"\n\t    description: \"\"\n\t    password: \"\"\n\t    ssh_keys:\n\t      - \"ssh-key 1234\"\n\t    home: \"/home/lzap\"\n\t    shell: \"/usr/bin/bash\"\n\t    uid: 1001\n\t    gid: 1001\n\t    groups: [\"wheel\", \"operators\"]\n\t    expires: 2050-05-13\n\tgroups:\n\t  - name: \"operators\"\n\t    gid: 1042"
    },
    "AnacondaInstaller": {
      "oneOf": [
        {
          "required": [
            "kickstart_text"
          ],
          "title": "kickstart_text"
        },
        {
          "required": [
            "kickstart_base64"
          ],
          "title": "kickstart_base64"
        }
      ],
      "properties": {
        "unattended": {
          "type": "boolean",
          "description": "Unattended installation Anaconda flag. When not set, Anaconda installer will ask for user input."
        },
        "sudo_nopasswd": {
          "items": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^[%a-zA-Z0-9_.][a-zA-Z0-9_.$-]*$"
          },
          "type": "array",
          "description": "Sudo users with NOPASSWD option. Adds a snippet to the kickstart file that, after installation, will create\ndrop-in files in /etc/sudoers.d to allow the specified users and groups to run sudo without a password\n(groups must be prefixed with %)."
        },
        "enabled_modules": {
          "items": {
            "type": "string",
            "enum": [
              "org.fedoraproject.Anaconda.Modules.Localization",
              "org.fedoraproject.Anaconda.Modules.Network",
              "org.fedoraproject.Anaconda.Modules.Payloads",
              "org.fedoraproject.Anaconda.Modules.Runtime",
              "org.fedoraproject.Anaconda.Modules.Security",
              "org.fedoraproject.Anaconda.Modules.Services",
              "org.fedoraproject.Anaconda.Modules.Storage",
              "org.fedoraproject.Anaconda.Modules.Subscription",
              "org.fedoraproject.Anaconda.Modules.Timezone",
              "org.fedoraproject.Anaconda.Modules.Users"
            ]
          },
          "type": "array"
        },
        "disabled_modules": {
          "items": {
            "type": "string",
            "enum": [
              "org.fedoraproject.Anaconda.Modules.Localization",
              "org.fedoraproject.Anaconda.Modules.Network",
              "org.fedoraproject.Anaconda.Modules.Payloads",
              "org.fedoraproject.Anaconda.Modules.Runtime",
              "org.fedoraproject.Anaconda.Modules.Security",
              "org.fedoraproject.Anaconda.Modules.Services",
              "org.fedoraproject.Anaconda.Modules.Storage",
              "org.fedoraproject.Anaconda.Modules.Subscription",
              "org.fedoraproject.Anaconda.Modules.Timezone",
              "org.fedoraproject.Anaconda.Modules.Users"
            ]
          },
          "type": "array"
        },
        "kickstart_text": {
          "type": "string",
          "description": "Kickstart file formatted in plain text."
        },
        "kickstart_base64": {
          "type": "string",
          "description": "Kickstart file formatted in base64."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "CACerts": {
      "properties": {
        "cert": {
          "type": "string",
          "description": "The PEM-encoded certificate."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "cert"
      ]
    },
    "ConnectorRegistration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enables rhc (Red Hat Connector) during boot."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "Containers": {
      "properties": {
        "source": {
          "type": "string",
          "description": "Container image URL is a reference to a container image at a registry."
        },
        "name": {
          "type": "string",
          "description": "Container name is an optional string to set the name under which the container image will\nbe saved in the image. If not specified name falls back to the same value as source."
        },
        "tls_verify": {
          "type": "boolean",
          "description": "Verify TLS connection, default is true.",
          "default": true
        },
        "local_storage": {
          "type": "string",
          "description": "Whether to pull the container image from the host's local-storage."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "source",
        "name"
      ]
    },
    "CoreOSInstaller": {
      "properties": {
        "installation_device": {
          "type": "string",
          "description": "Installation device for iot/edge simplified installer image types."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "DNF": {
      "properties": {
        "packages": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Packages to install. Package name or NVRA is accepted as long as DNF can\nresolve it. Examples: vim-enhanced, vim-enhanced-9.1.866-1 or vim-enhanced-9.1.866-1.fc41.x86_64.\nThe packages can also be specified as @group_name to install all packages in the group."
            },
            {
              "type": "null"
            }
          ]
        },
        "groups": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Groups to install, must match exactly. Groups describes groups of packages to be installed into\nthe image. Package groups are defined in the repository metadata. Each group has a descriptive name\nused primarily for display in user interfaces and an ID more commonly used in kickstart files.\nHere, the ID is the expected way of listing a group. Groups have three different ways of categorizing\ntheir packages: mandatory, default, and optional. For the purposes of blueprints, only mandatory\nand default packages will be installed. There is no mechanism for selecting optional packages."
            },
            {
              "type": "null"
            }
          ]
        },
        "import_keys": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Additional file paths to the GPG keys to import. The files must be present in the image.\nDoes not support importing from URLs."
            },
            {
              "type": "null"
            }
          ]
        },
        "modules": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Modules to enable or disable"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "FDORegistration": {
      "oneOf": [
        {
          "required": [
            "diun_pub_key_insecure"
          ],
          "title": "fdo_insecure"
        },
        {
          "required": [
            "diun_pub_key_hash"
          ],
          "title": "fdo_hash"
        },
        {
          "required": [
            "diun_pub_key_root_certs"
          ],
          "title": "fdo_rootcerts"
        }
      ],
      "properties": {
        "manufacturing_server_url": {
          "type": "string",
          "description": "FDO manufacturing server URL."
        },
        "diun_pub_key_insecure": {
          "type": "boolean",
          "description": "FDO insecure option. When set, both hash or root certs must not be set."
        },
        "diun_pub_key_hash": {
          "type": "string",
          "description": "FDO server public key hex-encoded hash. Cannot be used together with insecure option or root certs."
        },
        "diun_pub_key_root_certs": {
          "type": "string",
          "description": "FDO server public key root certificate path. Cannot be used together with insecure option or hash."
        },
        "di_mfg_string_type_mac_iface": {
          "type": "string",
          "description": "Optional interface name for the MAC address."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "manufacturing_server_url"
      ]
    },
    "FIPS": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enables the system FIPS mode (disabled by default). Currently only edge-raw-image, edge-installer,\nedge-simplified-installer, edge-ami and edge-vsphere images support this customization."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "FSNode": {
      "if": {
        "properties": {
          "type": {
            "const": "file"
          }
        }
      },
      "then": {
        "properties": {
          "contents": {
            "oneOf": [
              {
                "required": [
                  "base64"
                ],
                "title": "fsnodes_base64"
              },
              {
                "required": [
                  "text"
                ],
                "title": "fsnodes_text"
              }
            ]
          },
          "mode": {
            "default": 420
          }
        }
      },
      "else": {
        "properties": {
          "contents": {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "base64"
                  ],
                  "title": "fsnodes_base64"
                },
                {
                  "required": [
                    "text"
                  ],
                  "title": "fsnodes_text"
                }
              ]
            }
          },
          "mode": {
            "default": 493
          }
        }
      },
      "properties": {
        "path": {
          "type": "string",
          "pattern": "^/",
          "description": "Path is the absolute path to the file or directory."
        },
        "type": {
          "type": "string",
          "enum": [
            "file",
            "dir"
          ],
          "description": "Type is the type of the file system node, one of: file, dir.",
          "default": "file"
        },
        "state": {
          "type": "string",
          "enum": [
            "present",
            "absent"
          ],
          "description": "State is the state of the file system node, one of: present, absent.",
          "default": "present"
        },
        "mode": {
          "type": "integer",
          "description": "Mode is the file system node permissions. Defaults to 0644 for files and 0755 for directories."
        },
        "user": {
          "type": "string",
          "description": "User is the file system node owner. Defaults to root.",
          "default": "root"
        },
        "group": {
          "type": "string",
          "description": "Group is the file system node group. Defaults to root.",
          "default": "root"
        },
        "ensure_parents": {
          "type": "boolean",
          "description": "EnsureParents is a boolean that determines if the parent directories should be created if they do not exist.",
          "default": false
        },
        "contents": {
          "oneOf": [
            {
              "$ref": "#/$defs/FSNodeContents",
              "description": "Contents is the file system node contents. When not present, an empty file is created."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "path"
      ]
    },
    "FSNodeContents": {
      "properties": {
        "base64": {
          "type": "string",
          "description": "Base64-encoded file contents. Useful for binaries."
        },
        "text": {
          "type": "string",
          "description": "Plain text file contents."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "GroupAccount": {
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 256,
          "pattern": "^[a-zA-Z0-9_.][a-zA-Z0-9_.$-]*$",
          "description": "Group name. Accepted characters: lowercase letters, digits, underscores, dollars, and hyphens.\nName must not start with a hyphen. Maximum length is 256 characters. The validation pattern is\na relaxed version of https://github.com/shadow-maint/shadow/blob/master/lib/chkname.c"
        },
        "gid": {
          "type": "integer",
          "minimum": 1,
          "description": "The group ID (GID) of the group."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name"
      ]
    },
    "Ignition": {
      "oneOf": [
        {
          "required": [
            "embedded_base64"
          ],
          "title": "ignition_base64"
        },
        {
          "required": [
            "embedded_text"
          ],
          "title": "ignition_text"
        },
        {
          "required": [
            "firstboot_url"
          ],
          "title": "ignition_url"
        }
      ],
      "properties": {
        "embedded_base64": {
          "type": "string",
          "description": "The embedded configuration to be used by Ignition as base64-encoded contents.\n\nCannot be used with embedded_text or firstboot_url."
        },
        "embedded_text": {
          "type": "string",
          "description": "The embedded configuration to be used by Ignition as plain text.\n\nCannot be used with embedded_base64 or firstboot_url."
        },
        "firstboot_url": {
          "type": "string",
          "description": "The URL to the Ignition configuration to be used by Ignition. This configuration is a URL to a remote Ignition\nconfiguration. The firstboot_url is used if the embedded configuration is not specified.\n\nCannot be used with embedded_base64 or embedded_text."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "InsightsRegistration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enables insights client during boot."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "enabled"
      ]
    },
    "Installer": {
      "properties": {
        "anaconda": {
          "oneOf": [
            {
              "$ref": "#/$defs/AnacondaInstaller",
              "description": "Extra customizations for Anaconda installer (ISO) image types.\n\nBlueprint customizations that match the kickstart options (languages, keyboard, timezone)\nwill change the value in the kickstart file as well."
            },
            {
              "type": "null"
            }
          ]
        },
        "coreos": {
          "oneOf": [
            {
              "$ref": "#/$defs/CoreOSInstaller",
              "description": "CoreOS installer configuration is required by the edge-simplified-installer image. It allows to define the\ndestination device for the installation."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Kernel": {
      "properties": {
        "package": {
          "type": "string",
          "description": "Kernel DNF package name to replace the standard kernel with."
        },
        "cmdline_append": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "An optional string to append arguments to the bootloader kernel command line. The list\nwill be concatenated with spaces."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Locale": {
      "properties": {
        "languages": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "The languages attribute is a list of strings that contains the languages to be installed on the image.\nTo list available languages, run: localectl list-locales",
              "default": [
                "en_US.UTF-8"
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "keyboards": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "The keyboards attribute is a list of strings that contains the keyboards to be installed on the image.\nTo list available keyboards, run: localectl list-keymaps",
              "default": [
                "us"
              ]
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Network": {
      "properties": {
        "firewall": {
          "$ref": "#/$defs/NetworkFirewall",
          "description": "Firewall details - package firewalld must be installed in the image."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "NetworkFirewall": {
      "properties": {
        "services": {
          "oneOf": [
            {
              "items": {
                "oneOf": [
                  {
                    "required": [
                      "service"
                    ],
                    "title": "firewall_service"
                  },
                  {
                    "required": [
                      "port"
                    ],
                    "title": "firewall_port"
                  },
                  {
                    "required": [
                      "from",
                      "to"
                    ],
                    "title": "firewall_from_to"
                  }
                ],
                "properties": {
                  "service": {
                    "type": "string",
                    "minLength": 2
                  },
                  "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "from": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "to": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                  },
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "tcp",
                      "udp",
                      "any"
                    ],
                    "default": "any"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "additionalProperties": false,
                "type": "object"
              },
              "type": "array",
              "description": "Services to enable or disable. The service can be defined via an assigned IANA name,\nport number or port range.\n\nServices are processed in order, when a service is disabled and then accidentally enabled\nvia a port or a port range, the service will be enabled in the end.\n\nBy default the firewall blocks all access, except for services that enable their ports\nexplicitly such as the sshd."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "OpenSCAP": {
      "properties": {
        "profile_id": {
          "type": "string",
          "description": "The desired security profile ID."
        },
        "datastream": {
          "type": "string",
          "description": "Datastream to use for the scan. The datastream is the path to the SCAP datastream file to use for the scan.\nIf the datastream parameter is not provided, a sensible default based on the selected distro will be chosen."
        },
        "tailoring": {
          "oneOf": [
            {
              "$ref": "#/$defs/OpenSCAPTailoring",
              "description": "An optional OpenSCAP tailoring information. Can be done via profile selection or tailoring JSON file.\n\nIn case of profile selection, a tailoring file with a new tailoring profile ID is created and saved to the image.\nThe new tailoring profile ID is created by appending the _osbuild_tailoring suffix to the base profile.\nFor example, given tailoring options for the cis profile, tailoring profile\nxccdf_org.ssgproject.content_profile_cis_osbuild_tailoring will be created. The default namespace of the rules\nis org.ssgproject.content, so the prefix may be omitted for rules under this namespace, i.e.\norg.ssgproject.content_grub2_password and grub2_password are functionally equivalent.\nThe generated tailoring file is saved to the image as /usr/share/xml/osbuild-oscap-tailoring/tailoring.xml or,\nfor newer releases, in the /oscap_data directory, this is the location used for other OpenSCAP related artifacts.\n\nIt is also possible to use JSON tailoring. In that case, custom JSON file must be provided using the blueprint and\nused in json_filepath field alongside with json_profile_id field. The generated XML tailoring file is saved to the\nimage as /oscap_data/tailoring.xml."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "profile_id"
      ]
    },
    "OpenSCAPTailoring": {
      "oneOf": [
        {
          "anyOf": [
            {
              "required": [
                "selected",
                "unselected"
              ],
              "title": "tailoring_both"
            },
            {
              "required": [
                "selected"
              ],
              "title": "tailoring_selected"
            },
            {
              "required": [
                "unselected"
              ],
              "title": "tailoring_unselected"
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "json_profile_id",
                "json_filepath"
              ],
              "title": "tailoring_json"
            }
          ]
        }
      ],
      "properties": {
        "selected": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Selected rules, cannot be used with json_profile_id and json_filepath."
        },
        "unselected": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unselected rules, cannot be used with json_profile_id and json_filepath."
        },
        "json_profile_id": {
          "type": "string",
          "description": "JSON profile ID, must be used with json_filepath and cannot be used with selected and unselected fields."
        },
        "json_filepath": {
          "type": "string",
          "description": "JSON filepath, must be used with json_profile_id and cannot be used with selected and unselected fields."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RedHatRegistration": {
      "properties": {
        "activation_key": {
          "type": "string",
          "description": "Subscription manager activation key to use during registration. A list of keys to use to redeem or apply\nspecific subscriptions to the system."
        },
        "organization": {
          "type": "string",
          "description": "Subscription manager organization name to use during registration."
        },
        "subscription_manager": {
          "oneOf": [
            {
              "$ref": "#/$defs/SubscriptionManagerRegistration",
              "description": "Subscription manager details (internal use only). The customization expects that subscription-manager\npackage is installed in the image, which is by default part of the RHEL distribution bootable images.\nTo explicitly install the package, add it to the packages section in the blueprint.\nThe customization is not supported on Fedora distribution images."
            },
            {
              "type": "null"
            }
          ]
        },
        "insights": {
          "oneOf": [
            {
              "$ref": "#/$defs/InsightsRegistration",
              "description": "Red Hat Insights client details."
            },
            {
              "type": "null"
            }
          ]
        },
        "connector": {
          "oneOf": [
            {
              "$ref": "#/$defs/ConnectorRegistration",
              "description": "Red Hat console.redhat.com connector (rhc) details."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Registration": {
      "properties": {
        "redhat": {
          "$ref": "#/$defs/RedHatRegistration",
          "description": "Registration details for Red Hat operating system images."
        },
        "fdo": {
          "oneOf": [
            {
              "$ref": "#/$defs/FDORegistration",
              "description": "FDO allows users to configure FIDO Device Onboard device initialization parameters. It is only available\nwith the edge-simplified-installer or iot-simplified-installer image types."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "SubscriptionManagerRegistration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enables the subscription-manager DNF plugin.",
          "default": true
        },
        "product_plugin_enabled": {
          "type": "boolean",
          "description": "Enables the product-id DNF plugin.",
          "default": true
        },
        "repository_management": {
          "type": "boolean",
          "description": "Enabled repository_management plugin configuration.",
          "default": true
        },
        "auto_registration": {
          "type": "boolean",
          "description": "Enabled auto_registration plugin configuration.",
          "default": true
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "enabled",
        "product_plugin_enabled",
        "repository_management",
        "auto_registration"
      ]
    },
    "Systemd": {
      "properties": {
        "enabled": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "The enabled attribute is a list of strings that contains the systemd units to be enabled."
            },
            {
              "type": "null"
            }
          ]
        },
        "disabled": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "The disabled attribute is a list of strings that contains the systemd units to be disabled."
            },
            {
              "type": "null"
            }
          ]
        },
        "masked": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "The masked attribute is a list of strings that contains the systemd units to be masked."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "TimeDate": {
      "properties": {
        "timezone": {
          "type": "string",
          "description": "System time zone. Defaults to UTC.\nTo list available time zones run: timedatectl list-timezones",
          "default": "UTC"
        },
        "ntp_servers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "An optional list of strings containing NTP servers to use. If not provided the distribution defaults are used"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "timezone"
      ]
    },
    "UserAccount": {
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 256,
          "pattern": "^[a-zA-Z0-9_.][a-zA-Z0-9_.$-]*$",
          "description": "Account name. Accepted characters: lowercase letters, digits, underscores, dollars, and hyphens.\nName must not start with a hyphen. Maximum length is 256 characters. The validation pattern is\na relaxed version of https://github.com/shadow-maint/shadow/blob/master/lib/chkname.c"
        },
        "description": {
          "type": "string",
          "maxLength": 4096,
          "description": "A longer description of the account."
        },
        "password": {
          "type": "string",
          "description": "Password either in plain text or encrypted form. If the password is not provided, the account will be\nlocked and the user will not be able to log in with a password. The password can be encrypted using\nthe crypt(3) function. The format of the encrypted password is $id$salt$hashed,\nwhere $id is the algorithm used (1, 5, 6, or 2a)."
        },
        "ssh_keys": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "SSH keys to be added to the account's authorized_keys file."
        },
        "home": {
          "type": "string",
          "description": "The home directory of the user."
        },
        "shell": {
          "type": "string",
          "description": "The shell of the user."
        },
        "uid": {
          "type": "integer",
          "minimum": 1,
          "description": "The user ID (UID) of the user."
        },
        "gid": {
          "type": "integer",
          "minimum": 1,
          "description": "The primary group ID (GID) of the user."
        },
        "groups": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Additional groups that the user should be a member of."
        },
        "expires": {
          "type": "string",
          "format": "date",
          "description": "The expiration date of the account in the format YYYY-MM-DD."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name"
      ]
    }
  },
  "properties": {
    "name": {
      "type": "string",
      "description": "The name attribute is a string that contains the name of the blueprint. It can contain spaces,\nbut they may be converted to dash characters during build. It should be short and descriptive."
    },
    "description": {
      "type": "string",
      "description": "The description attribute is a string that can be a longer description of the blueprint and is\nonly used for display purposes."
    },
    "hostname": {
      "type": "string",
      "description": "Hostname is an optional string that can be used to configure the hostname of the final image."
    },
    "kernel": {
      "oneOf": [
        {
          "$ref": "#/$defs/Kernel",
          "description": "Custom Linux kernel details, optional."
        },
        {
          "type": "null"
        }
      ]
    },
    "fips": {
      "oneOf": [
        {
          "$ref": "#/$defs/FIPS",
          "description": "FIPS details, optional."
        },
        {
          "type": "null"
        }
      ]
    },
    "dnf": {
      "oneOf": [
        {
          "$ref": "#/$defs/DNF",
          "description": "DNF package managers details. When using virtual provides as the package name the version glob\nshould be *. And be aware that you will be unable to freeze the blueprint. This is because the\nprovides will expand into multiple packages with their own names and versions."
        },
        {
          "type": "null"
        }
      ]
    },
    "containers": {
      "oneOf": [
        {
          "items": {
            "$ref": "#/$defs/Containers"
          },
          "type": "array",
          "description": "Containers to be pulled during the image build and stored in the image at the default local\ncontainer storage location that is appropriate for the image type, so that all supported container\ntools like podman and cri-o will be able to work with it.\nThe embedded containers are not started, to do so you can create systemd unit files or quadlets with\nthe files customization."
        },
        {
          "type": "null"
        }
      ]
    },
    "registration": {
      "oneOf": [
        {
          "$ref": "#/$defs/Registration",
          "description": "Registration details for various registration types, namely Red Hat Subscription Manager."
        },
        {
          "type": "null"
        }
      ]
    },
    "accounts": {
      "oneOf": [
        {
          "$ref": "#/$defs/Accounts",
          "description": "Users and groups details"
        },
        {
          "type": "null"
        }
      ]
    },
    "timedate": {
      "oneOf": [
        {
          "$ref": "#/$defs/TimeDate",
          "description": "Time and date details allowing configuration of the timezone and NTP servers. The timezone is\nset by default to UTC."
        },
        {
          "type": "null"
        }
      ]
    },
    "locale": {
      "oneOf": [
        {
          "$ref": "#/$defs/Locale",
          "description": "An optional object that contains the following attributes to customize the locale settings for the system.\nIf the locale is not specified, the default locale and keyboard settings are used: en_US.UTF-8 and us."
        },
        {
          "type": "null"
        }
      ]
    },
    "network": {
      "oneOf": [
        {
          "$ref": "#/$defs/Network",
          "description": "Networking details including firewall configuration."
        },
        {
          "type": "null"
        }
      ]
    },
    "openscap": {
      "oneOf": [
        {
          "$ref": "#/$defs/OpenSCAP",
          "description": "OpenSCAP policy to be applied on the operating system. Added in RHEL 8.7 \u0026 RHEL 9.1. It is possible to either\nlist policy rules (enable or disable) or to provide a full policy file."
        },
        {
          "type": "null"
        }
      ]
    },
    "systemd": {
      "oneOf": [
        {
          "$ref": "#/$defs/Systemd",
          "description": "Systemd unit configuration.\n\nThis section can be used to control which services are enabled at boot time. Some image types already\nhave services enabled or disabled in order for the image to work correctly, and cannot be overridden.\nFor example, ami image type requires sshd, chronyd, and cloud-init services. Blueprint services do not\nreplace these services, but add them to the list of services already present in the templates, if any."
        },
        {
          "type": "null"
        }
      ]
    },
    "fsnodes": {
      "oneOf": [
        {
          "items": {
            "$ref": "#/$defs/FSNode"
          },
          "type": "array",
          "description": "File system nodes details.\n\nYou can use the customization to create new files or to replace existing ones, if not restricted by\nthe policy specified below. If the target path is an existing symlink to another file, the symlink\nwill be replaced by the custom file.\n\nPlease note that the parent directory of a specified file must exist. If it does not exist, the image\nbuild will fail. One can ensure that the parent directory exists by specifying \"ensure_parents\".\n\nIn addition, the following files are not allowed to be created or replaced by policy: /etc/fstab,\n/etc/shadow, /etc/passwd and /etc/group.\n\nUsing the files customization comes with a high chance of creating an image that doesn't boot. Use this\nfeature only if you know what you are doing. Although the files customization can be used to configure\nparts of the OS which can also be configured by other blueprint customizations, this use is discouraged.\nIf possible, users should always default to using the specialized blueprint customizations. Note that\nif you combine the files customizations with other customizations, the other customizations may not work\nas expected or may be overridden by the files customizations.\n\nYou can create custom directories as well. The existence of a specified directory is handled gracefully\nonly if no explicit mode, user or group is specified. If any of these customizations are specified and\nthe directory already exists in the image, the image build will fail. The intention is to prevent changing\nthe ownership or permissions of existing directories."
        },
        {
          "type": "null"
        }
      ]
    },
    "ignition": {
      "oneOf": [
        {
          "$ref": "#/$defs/Ignition",
          "description": "Provides Ignition configuration files to be used in edge-raw-image and edge-simplified-installer images.\nCheck the RHEL for Edge butane specification for a description of the supported configuration options.\n\nThe blueprint configuration can be done either by embedding an Ignition configuration file into the image,\nor providing a provisioning URL that will be fetched at first boot."
        },
        {
          "type": "null"
        }
      ]
    },
    "installer": {
      "oneOf": [
        {
          "$ref": "#/$defs/Installer",
          "description": "Extra customization for Anaconda installer (ISO) and Edge/IOT simplified installer image types."
        },
        {
          "type": "null"
        }
      ]
    },
    "cacerts": {
      "oneOf": [
        {
          "items": {
            "$ref": "#/$defs/CACerts"
          },
          "type": "array",
          "description": "The CA certificates to be added to the image. The certificates are added to the system-wide CA trust store.\nThe certificates are added to the /etc/pki/ca-trust/source/anchors/ directory and the update-ca-trust command\nis run to update the system-wide CA trust store."
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "type": "object",
  "required": [
    "name"
  ],
  "description": "Image Builder new blueprint schema.\n\nTHIS IS WORK IN PROGRESS"
}
